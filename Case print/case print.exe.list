EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
case print.exe -- emu8086 assembler version: 4.08  
 
[ 8/2/2017  --  6:55:36 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL SMALL
[   2]        :                                       .STACK 100H
[   3]        :                                       .DATA
[   4]    0100: 54 48 45 20 49 4E 50 55 54 20 49 53   UCASE DB 'THE INPUT IS UPPER CASE $'
                20 55 50 50 45 52 20 43 41 53 45 20 
                24                                  
[   5]    0119: 54 48 45 20 49 4E 50 55 54 20 49 53   LCASE DB 'THE INPUT IS LOWER CASE $'
                20 4C 4F 57 45 52 20 43 41 53 45 20 
                24                                  
[   6]    0132: 54 48 45 20 49 4E 50 55 54 20 49 53   DCASE DB 'THE INPUT IS DIGIT$'
                20 44 49 47 49 54 24                
[   7]    0145: 54 48 45 20 49 4E 50 55 54 20 49 53   SCASE DB 'THE INPUT IS SPECIAL CHARACTER $'
                20 53 50 45 43 49 41 4C 20 43 48 41 
                52 41 43 54 45 52 20 24             
[   8]        :                                       
[   9]        :                                       .CODE
[  10]        :                                       
[  11]    0170:                                       MAIN PROC
[  12]        :                                       
[  13]    0170: B8 10 00                              MOV AX,@DATA  ;;; INITIALIZE THE DATA SEGMENT
[  14]    0173: 8E D8                                 MOV DS,AX
[  15]        :                                       
[  16]    0175: B4 01                                 MOV AH,1  ; TAKING INPUT FROM USER
[  17]    0177: CD 21                                 INT 21H
[  18]        :                                       
[  19]    0179: 8A C8                                 MOV CL,AL  ; CL = AL
[  20]        :                                       
[  21]    017B: 80 F9 30                              CMP CL,48
[  22]    017E: 7D 02                                 JGE DIGIT_CASE ;; IF((CL>= 48))
[  23]        :                                       
[  24]    0180: EB 38                                 JMP SPECIAL_CASE ;; IF THE CONDITION IS FALSE
[  25]        :                                       
[  26]    0182:                                       DIGIT_CASE:
[  27]    0182: 80 F9 3A                              CMP CL,58
[  28]    0185: 7D 09                                 JGE UPPER_CASE ;; IF((CL<= 57))
[  29]        :                                       
[  30]    0187: B4 09                                 MOV AH,9
[  31]    0189: BA 32 00                              LEA DX,DCASE
[  32]    018C: CD 21                                 INT 21H
[  33]    018E: EB 31                                 JMP EXIT
[  34]        :                                       
[  35]    0190:                                       UPPER_CASE:
[  36]        :                                       
[  37]    0190: 80 F9 41                              CMP CL,65
[  38]    0193: 7D 02                                 JGE UPPER_CASE2 ;; IF((CL<= 65))
[  39]        :                                       
[  40]    0195: EB 23                                 JMP SPECIAL_CASE
[  41]        :                                       
[  42]        :                                       
[  43]        :                                       
[  44]        :                                       
[  45]    0197:                                       UPPER_CASE2:
[  46]    0197: 80 F9 5B                              CMP CL,91
[  47]    019A: 7D 09                                 JGE LOWER_CASE
[  48]        :                                       
[  49]    019C: B4 09                                 MOV AH,9
[  50]    019E: BA 00 00                              LEA DX,UCASE
[  51]    01A1: CD 21                                 INT 21H
[  52]    01A3: EB 1C                                 JMP EXIT
[  53]        :                                       
[  54]    01A5:                                       LOWER_CASE:
[  55]        :                                       
[  56]    01A5: 80 F9 61                              CMP CL,97
[  57]    01A8: 7D 02                                 JGE LOWER_CASE2
[  58]    01AA: EB 0E                                 JMP SPECIAL_CASE
[  59]        :                                       
[  60]    01AC:                                       LOWER_CASE2:
[  61]        :                                       
[  62]    01AC: 80 F9 7B                              CMP CL,123
[  63]    01AF: 7D 09                                 JGE SPECIAL_CASE
[  64]        :                                       
[  65]    01B1: B4 09                                 MOV AH,9
[  66]    01B3: BA 19 00                              LEA DX,LCASE
[  67]    01B6: CD 21                                 INT 21H
[  68]        :                                       
[  69]    01B8: EB 07                                 JMP EXIT
[  70]        :                                       
[  71]    01BA:                                       SPECIAL_CASE:
[  72]        :                                       
[  73]    01BA: B4 09                                 MOV AH,9
[  74]    01BC: BA 45 00                              LEA DX,SCASE
[  75]    01BF: CD 21                                 INT 21H
[  76]        :                                       
[  77]        :                                       
[  78]        :                                       
[  79]        :                                       
[  80]        :                                       
[  81]    01C1:                                       EXIT:
[  82]        :                                       
[  83]    01C1: B4 4C                                 MOV AH,4CH
[  84]    01C3: CD 21                                 INT 21H
[  85]        :                                       
[  86]        :                                       
[  87]        :                                       MAIN ENDP
[  88]        :                                       END MAIN
[  89]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: C5      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 54      -   check sum (l.byte)
0013: F6      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 17      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 17      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
